{"version":3,"sources":["logo.svg","components/EmployeList/EmployeList.module.css","components/EmployeList/EmployeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EmployeList","props","state","error","isLoaded","items","columns","title","field","type","fetch","window","location","protocol","hostname","then","res","json","result","setState","this","React","createElement","message","data","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","Component","App","className","src","logo","alt","Boolean","match","ReactDOM","render","StrictMode","rel","href","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,sGCC3CD,EAAOC,QAAU,CAAC,YAAc,mC,gMCoGjBC,E,kDAjGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,GACPC,QAAS,CACP,CAAEC,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,aAAcC,MAAO,YAAaC,KAAM,WACjD,CAAEF,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,aAAcC,MAAO,gBAXjB,E,gEAgBE,IAAD,OAClBE,MAAMC,OAAOC,SAASC,SAAS,KAAKF,OAAOC,SAASE,SAAS,YAAYC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACpG,EAAKC,SAAS,CACZf,UAAU,EACVC,MAAOa,EAAOb,WAMlB,SAAAF,GACE,EAAKgB,SAAS,CACZf,UAAU,EACVD,e,+BAKI,IAAD,SACoCiB,KAAKlB,MAAxCC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUC,EADlB,EACkBA,MAAMC,EADxB,EACwBA,QAC/B,OAAIH,EACKkB,IAAMC,cACX,MACA,KACA,UACAnB,EAAMoB,SAEEnB,EAQJ,kBAAC,IAAD,CACEG,MAAM,gBACND,QAASA,EACTkB,KAAMnB,EACNoB,SAAU,CACRC,SAAU,SAACC,GAAD,OACR,IAAIC,SAAQ,SAACC,GACXC,YAAW,WACTD,IACA,EAAKV,UAAS,SAACY,GACb,IAAMP,EAAI,YAAOO,EAAUP,MAE3B,OADAA,EAAKQ,KAAKL,GACH,2BAAKI,GAAZ,IAAuBP,cAExB,SAEPS,YAAa,SAACN,EAASO,GAAV,OACX,IAAIN,SAAQ,SAACC,GACXC,YAAW,WACTD,IACIK,GACF,EAAKf,UAAS,SAACY,GACb,IAAMP,EAAI,YAAOO,EAAUP,MAE3B,OADAA,EAAKA,EAAKW,QAAQD,IAAYP,EACvB,2BAAKI,GAAZ,IAAuBP,cAG1B,SAEPY,YAAa,SAACF,GAAD,OACX,IAAIN,SAAQ,SAACC,GACXC,YAAW,WACTD,IACA,EAAKV,UAAS,SAACY,GACb,IAAMP,EAAI,YAAOO,EAAUP,MAE3B,OADAA,EAAKa,OAAOb,EAAKW,QAAQD,GAAU,GAC5B,2BAAKH,GAAZ,IAAuBP,cAExB,YA7CVH,IAAMC,cACX,MACA,KACA,kB,GAhDkBD,IAAMiB,W,OCcjBC,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,kBAAC,EAAD,SCCYC,QACW,cAA7BjC,OAAOC,SAASE,UAEe,UAA7BH,OAAOC,SAASE,UAEhBH,OAAOC,SAASE,SAAS+B,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,0BAAMC,IAAI,aAAaC,KAAK,gFAE9B,0BAAMD,IAAI,aAAaC,KAAK,4DAE1B,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLwD,QAAQxD,MAAMA,EAAMoB,c","file":"static/js/main.28ea787c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EmployeList\":\"EmployeList_EmployeList__I_Z-d\"};","import React from 'react';\r\nimport styles from './EmployeList.module.css';\r\nimport MaterialTable from 'material-table';\r\nclass EmployeList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: [],\r\n      columns: [\r\n        { title: 'Name', field: 'name' },\r\n        { title: 'Surname', field: 'surname' },\r\n        { title: 'Birth Year', field: 'birthYear', type: 'numeric' },\r\n        { title: 'Skills', field: 'skills' },\r\n        { title: 'Department', field: 'department'},\r\n      ]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(window.location.protocol+\"//\"+window.location.hostname+\"/empList\").then(res => res.json()).then(result => {\r\n      this.setState({\r\n        isLoaded: true,\r\n        items: result.items\r\n      });\r\n    },\r\n    // Note: it's important to handle errors here\r\n    // instead of a catch() block so that we don't swallow\r\n    // exceptions from actual bugs in components.\r\n    error => {\r\n      this.setState({\r\n        isLoaded: true,\r\n        error\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, items,columns } = this.state;\r\n    if (error) {\r\n      return React.createElement(\r\n        'div',\r\n        null,\r\n        'Error: ',\r\n        error.message\r\n      );\r\n    } else if (!isLoaded) {\r\n      return React.createElement(\r\n        'div',\r\n        null,\r\n        'Loading...'\r\n      );\r\n    } else {\r\n        return (\r\n            <MaterialTable\r\n              title=\"Employee List\"\r\n              columns={columns}\r\n              data={items}\r\n              editable={{\r\n                onRowAdd: (newData) =>\r\n                  new Promise((resolve) => {\r\n                    setTimeout(() => {\r\n                      resolve();\r\n                      this.setState((prevState) => {\r\n                        const data = [...prevState.data];\r\n                        data.push(newData);\r\n                        return { ...prevState, data };\r\n                      });\r\n                    }, 600);\r\n                  }),\r\n                onRowUpdate: (newData, oldData) =>\r\n                  new Promise((resolve) => {\r\n                    setTimeout(() => {\r\n                      resolve();\r\n                      if (oldData) {\r\n                        this.setState((prevState) => {\r\n                          const data = [...prevState.data];\r\n                          data[data.indexOf(oldData)] = newData;\r\n                          return { ...prevState, data };\r\n                        });\r\n                      }\r\n                    }, 600);\r\n                  }),\r\n                onRowDelete: (oldData) =>\r\n                  new Promise((resolve) => {\r\n                    setTimeout(() => {\r\n                      resolve();\r\n                      this.setState((prevState) => {\r\n                        const data = [...prevState.data];\r\n                        data.splice(data.indexOf(oldData), 1);\r\n                        return { ...prevState, data };\r\n                      });\r\n                    }, 600);\r\n                  }),\r\n              }}\r\n            />\r\n          );\r\n    }\r\n  }\r\n}\r\nexport default EmployeList;\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EmployeList from './components//EmployeList/EmployeList';\nimport EmployeList1 from './components/EmployeList';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      \n        <EmployeList/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}